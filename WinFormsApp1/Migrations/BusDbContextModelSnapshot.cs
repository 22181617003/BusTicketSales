// <auto-generated />
using System;
using BusTicketSales.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusTicketSales.Migrations
{
    [DbContext(typeof(BusDbContext))]
    partial class BusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusTicketSales.Entities.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BranchID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BranchID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Bus", b =>
                {
                    b.Property<int>("BusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusID"));

                    b.Property<int>("BranchID")
                        .HasColumnType("integer");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlateNumber")
                        .HasColumnType("integer");

                    b.HasKey("BusID");

                    b.HasIndex("BranchID");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DriverID"));

                    b.Property<int>("BranchID")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LicenseNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DriverID");

                    b.HasIndex("BranchID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackID"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("TripID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackID");

                    b.HasIndex("TripID");

                    b.HasIndex("UserID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentID"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReservationID")
                        .HasColumnType("integer");

                    b.HasKey("PaymentID");

                    b.HasIndex("ReservationID")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationID"));

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TripID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ReservationID");

                    b.HasIndex("TripID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Trip", b =>
                {
                    b.Property<int>("TripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripID"));

                    b.Property<int>("ArrivalBranchID")
                        .HasColumnType("integer");

                    b.Property<int>("BusID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartureBranchID")
                        .HasColumnType("integer");

                    b.Property<int>("DriverID")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("TripID");

                    b.HasIndex("ArrivalBranchID");

                    b.HasIndex("BusID");

                    b.HasIndex("DepartureBranchID");

                    b.HasIndex("DriverID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("BusTicketSales.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Bus", b =>
                {
                    b.HasOne("BusTicketSales.Entities.Branch", "Branch")
                        .WithMany("Buses")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Driver", b =>
                {
                    b.HasOne("BusTicketSales.Entities.Branch", "Branch")
                        .WithMany("Drivers")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Feedback", b =>
                {
                    b.HasOne("BusTicketSales.Entities.Trip", "Trip")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketSales.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Payment", b =>
                {
                    b.HasOne("BusTicketSales.Entities.Reservation", "Reservation")
                        .WithOne("Payment")
                        .HasForeignKey("BusTicketSales.Entities.Payment", "ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Reservation", b =>
                {
                    b.HasOne("BusTicketSales.Entities.Trip", "Trip")
                        .WithMany("Reservations")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketSales.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Trip", b =>
                {
                    b.HasOne("BusTicketSales.Entities.Branch", "ArrivalBranch")
                        .WithMany("ArrivalTrips")
                        .HasForeignKey("ArrivalBranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketSales.Entities.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketSales.Entities.Branch", "DepartureBranch")
                        .WithMany("DepartureTrips")
                        .HasForeignKey("DepartureBranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicketSales.Entities.Driver", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalBranch");

                    b.Navigation("Bus");

                    b.Navigation("DepartureBranch");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Branch", b =>
                {
                    b.Navigation("ArrivalTrips");

                    b.Navigation("Buses");

                    b.Navigation("DepartureTrips");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Driver", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusTicketSales.Entities.Reservation", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("BusTicketSales.Entities.Trip", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BusTicketSales.Entities.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
